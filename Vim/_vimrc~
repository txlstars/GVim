source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

if has("gui_running")
	"au GUIEnter * simalt ~x " 窗口启动时自动最大化
	set guioptions-=m " 隐藏菜单栏
	set guioptions-=T " 隐藏工具栏
	set guioptions-=L " 隐藏左侧滚动条
	set guioptions-=r " 隐藏右侧滚动条
	set guioptions-=b " 隐藏底部滚动条
	set showtabline=0 " 隐藏Tab栏
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" * 定位至当前光光标所指单词的下一次出现的地方
" # 定位至当前光光标所指单词的上一次出现的地方
" n 定位至跳至已被标记出的单词下一次出现的地方
" shift+n 定位至跳至已被标记出的单词上一次出现的地方
" noh 取消搜索高亮

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"取消自动注释下一行
set nocompatible

if has("syntax")
	syntax on
endif

set nu
filetype plugin on

"设置字体
set guifont=Consolas:h16
set encoding=utf-8
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"搜索模式忽略大小写
set ignorecase

set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set cindent

"匹配括号
set showmatch

"主题	https://github.com/altercation
syntax enable
set background=dark
colorscheme solarized

map <C-h> <Esc>:vertical resize +1<CR>
map <C-l> <Esc>:vertical resize -1<CR>
map <C-j> <Esc>:resize +1<CR>
map <C-k> <Esc>:resize -1<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off

" vim插件管理 https://github.com/VundleVim/Vundle.vim
" set the runtime path to include Vundle and initialize
set rtp+=$VIM/.vim/bundle/vundle/
call vundle#rc()
	" alternatively, pass a path where Vundle should install plugins
	let path = '$VIM/.vim/bundle'
	call vundle#rc(path)

	" let Vundle manage Vundle, required
	" Plugin 'gmarik/vundle'

	" The following are examples of different formats supported.
	" Keep Plugin commands between here and filetype plugin indent on.
	" scripts on GitHub repos
	" https://github.com/vim-scripts
	""Plugin 'tpope/vim-rails.git'
	" The sparkup vim script is in a subdirectory of this repo called vim.
	" Pass the path to set the runtimepath properly.
	""Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
	" scripts from http://vim-scripts.org/vim/scripts.html
	""Plugin 'FuzzyFinder'
	" scripts not on GitHub
	""Plugin 'git://git.wincent.com/command-t.git'
	" git repos on your local machine (i.e. when working on your own plugin)
	""Plugin 'file:///home/gmarik/path/to/plugin'
	" ...

	filetype plugin indent on     " required
	" To ignore plugin indent changes, instead use:
	"filetype plugin on
	"
	" Brief help
	" :PluginList          - list configured plugins
	" :PluginInstall(!)    - install (update) plugins
	" :PluginSearch(!) foo - search (or refresh cache first) for foo
	" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
	"
	" see :h vundle for more details or wiki for FAQ
	" NOTE: comments after Plugin commands are not allowed.
	" Put your stuff after this line
	

	Plugin 'https://github.com/scrooloose/nerdtree.git'
	Plugin 'https://github.com/majutsushi/tagbar.git'
	Plugin 'https://github.com/vim-scripts/OmniCppComplete.git'
	Plugin 'SrcExpl'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctags
" Ctrl + ] 变量声明或定义
" Ctrl + o/t 返回到跳转前的位置
" gd 局部变量查找
" vim -t fun 直接定位到fun的定义位置
" :tags 列出查找\跳转过程

map <F10> <ESC>:!D:\software\Vim\ctags58\ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q *<CR><CR>
"D:\software\Vim\ctags58\ctags -I __THROW –file-scope=yes –langmap=c:+.h –languages=c,c++ –links=yes –c-kinds=+p --fields=+S -R 
"-f ~/.vim/systags /usr/include /usr/local/include

"set tags+=~/.vim/systags

"set tags=~/path/tags

set tags=tags;
set autochdir

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope http://cscope.sourceforge.net/
" 在你需要浏览源码的根目录下（如你想用cscope看linux源码)使用下面命令：
" :cscope -Rbkq<回车>
" R 表示把所有子目录里的文件也建立索引
" b 表示cscope不启动自带的用户界面，而仅仅建立符号数据库
" q生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
" k在生成索引文件时，不搜索/usr/include目录
" dir /s /b *.c *.h > cscope.files
" 在源码根目录下打开任意.c文件，使用如下命令：
" Ctrl+]将跳到光标所在变量或函数的定义处 Ctrl+T返回
" :cs find s ---- 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
" :cs find g ---- 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
" :cs find d ---- 查找本函数调用的函数
" :cs find c ---- 查找调用本函数的函数
" :cs find t: ---- 查找指定的字符串
" :cs find e ---- 查找egrep模式，相当于egrep功能，但查找速度快多了
" :cs find f ---- 查找并打开文件，类似vim的find功能
" :cs find i ---- 查找包含本文件的文
" 所有命令也可以且按銉来实现：
" Ctrl+\ 再按 s 表示：cs find s命令
" 同理实现cs find + g,d,c,t,e,f,i命令


" set cscmd='D:software\Vim\cscope'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tagbar configure
let g:tagbar_autofocus=1
let g:tagbar_ctags_bin = 'D:\software\Vim\ctags58\ctags'
let g:tagbar_width=30
let g:tagbar_left=1
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() 
map <F2> <ESC>:TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nerdtree configure
set autochdir
let mapleader = ","
let NERDTreeChDirMode = 2
let NERDTreeWinSize = 30
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeQuitOnOpen = 1
nnoremap <leader>file :NERDTree .<CR>
map <F1> <Esc>:NERDTreeToggle<CR>
map <S-x> <Esc>:NERDTree<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OmniCppComplete configure

" ctags 索引文件 (根据已经生成的索引文件添加即可, 这里我额外添加了 hge 和 curl 的索引文件)
" OmniCppComplete
filetype on
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
let OmniCpp_DisplayMode = 0
let OmniCpp_ShowScopeInAbbr = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" 自动关闭补全窗口
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest

imap <C-N> <C-X><C-O>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SrcExpl configure
map <F8> <Esc>:SrcExplToggle<CR><CR>
let g:SrcExpl_winHeight = 80
let g:SrcExpl_refreshTime = 100
let g:SrcExpl_isUpdateTags = 0
let g:SrcExpl_jumpKey = "<Enter>"
let g:SrcExpl_gobackKey = "<SPACE>"
"let g:SrcExpl_prevDefKey = "<F9>"
"let g:SrcExpl_nextDefKey = "<F10>"
let g:SrcExpl_updateTagsKey = "<F12>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


















